{"version":3,"sources":["../../src/main.js"],"names":["mimicFn","keepFuncProps","functor","newFunctor","func","args","newFunc","call","ignoreNonConfigurable","keepFuncPropsA"],"mappings":"AAAA,MAAOA,CAAAA,OAAP,KAAoB,UAApB;;;AAGA,KAAMC,CAAAA,aAAa,CAAG,SAAUC,OAAV,CAAmB;AACvC,GAAI,MAAOA,CAAAA,OAAP,GAAmB,UAAvB,CAAmC;AACjC,MAAOA,CAAAA,OAAP;AACD;;AAED,MAAO,SAASC,CAAAA,UAAT,CAAoBC,IAApB,CAA0B,GAAGC,IAA7B,CAAmC;;AAExC,KAAMC,CAAAA,OAAO,CAAGJ,OAAO,CAACK,IAAR,CAAa,IAAb,CAAmBH,IAAnB,CAAyB,GAAGC,IAA5B,CAAhB;;AAEA,GAAI,MAAOD,CAAAA,IAAP,GAAgB,UAAhB,EAA8B,MAAOE,CAAAA,OAAP,GAAmB,UAArD,CAAiE;AAC/DN,OAAO,CAACM,OAAD,CAAUF,IAAV,CAAgB,CAAEI,qBAAqB,CAAE,IAAzB,CAAhB,CAAP;AACD;;AAED,MAAOF,CAAAA,OAAP;AACD,CATD;AAUD,CAfD;;;;AAmBA,KAAMG,CAAAA,cAAc,CAAGR,aAAa,CAACA,aAAD,CAApC;;;AAGA,cAAeQ,CAAAA,cAAc,CAACR,aAAD,CAA7B","sourcesContent":["import mimicFn from 'mimic-fn'\n\n// Wraps a functor so it does not modify a function `name`, etc.\nconst keepFuncProps = function (functor) {\n  if (typeof functor !== 'function') {\n    return functor\n  }\n\n  return function newFunctor(func, ...args) {\n    // eslint-disable-next-line fp/no-this, no-invalid-this\n    const newFunc = functor.call(this, func, ...args)\n\n    if (typeof func === 'function' && typeof newFunc === 'function') {\n      mimicFn(newFunc, func, { ignoreNonConfigurable: true })\n    }\n\n    return newFunc\n  }\n}\n\n// Use on itself so that `keepFuncProps(functor)` does not modify functor's\n// properties\nconst keepFuncPropsA = keepFuncProps(keepFuncProps)\n// Then we use it on `keepFuncProps()` itself so that it's named `keepFuncProps`\n// instead of `newFunctor`\nexport default keepFuncPropsA(keepFuncProps)\n"],"file":"src/main.js"}