import process from"process";

import moize from"moize";

import{EVENTS}from"./handle/main.js";
import{emitLimitedWarning}from"./limit.js";
import{getOptions}from"./options/main.js";
import{removeWarningListener,restoreWarningListener}from"./warnings.js";


export default function logProcessErrors(opts){
const optsA=getOptions({opts});

removeWarningListener();

const listeners=addListeners({opts:optsA});


const stopLogProcessErrors=()=>stopLogging(listeners);
return stopLogProcessErrors;
}

const addListeners=function({opts}){
return Object.entries(EVENTS).map(([name,eventFunc])=>
addListener({opts,name,eventFunc}));

};

const addListener=function({opts,name,eventFunc}){




const previousEvents=new Set;

const mEmitLimitedWarning=moize(emitLimitedWarning,{
maxSize:Number.POSITIVE_INFINITY});


const eventListener=eventFunc.bind(undefined,{
opts,
name,
previousEvents,
mEmitLimitedWarning});

process.on(name,eventListener);

return{eventListener,name};
};


const stopLogging=function(listeners){
listeners.forEach(removeListener);
restoreWarningListener();
};

const removeListener=function({eventListener,name}){
process.off(name,eventListener);
};
//# sourceMappingURL=main.js.map