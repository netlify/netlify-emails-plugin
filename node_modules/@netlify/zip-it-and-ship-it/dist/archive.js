"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.endZip = exports.addZipContent = exports.addZipFile = exports.startZip = void 0;
const fs_1 = require("fs");
const util_1 = require("util");
const archiver_1 = __importDefault(require("archiver"));
const end_of_stream_1 = __importDefault(require("end-of-stream"));
const pEndOfStream = (0, util_1.promisify)(end_of_stream_1.default);
// Start zipping files
const startZip = function (destPath) {
    const output = (0, fs_1.createWriteStream)(destPath);
    const archive = (0, archiver_1.default)('zip');
    archive.pipe(output);
    return { archive, output };
};
exports.startZip = startZip;
// Add new file to zip
const addZipFile = function (archive, file, name, stat) {
    if (stat.isSymbolicLink()) {
        const linkContent = (0, fs_1.readlinkSync)(file);
        archive.symlink(name, linkContent, stat.mode);
    }
    else {
        archive.file(file, {
            name,
            mode: stat.mode,
            // Ensure sha256 stability regardless of mtime
            date: new Date(0),
            stats: stat,
        });
    }
};
exports.addZipFile = addZipFile;
// Add new file content to zip
const addZipContent = function (archive, content, name) {
    archive.append(content, { name, date: new Date(0) });
};
exports.addZipContent = addZipContent;
// End zipping files
const endZip = async function (archive, output) {
    archive.finalize();
    await pEndOfStream(output);
};
exports.endZip = endZip;
//# sourceMappingURL=archive.js.map