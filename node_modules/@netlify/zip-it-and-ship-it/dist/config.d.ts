import { FunctionSource } from './function.js';
import type { NodeBundlerName } from './runtimes/node/bundlers/types.js';
import type { NodeVersionString } from './runtimes/node/index.js';
export interface FunctionConfig {
    externalNodeModules?: string[];
    includedFiles?: string[];
    includedFilesBasePath?: string;
    ignoredNodeModules?: string[];
    nodeBundler?: NodeBundlerName;
    nodeSourcemap?: boolean;
    nodeVersion?: NodeVersionString;
    processDynamicNodeImports?: boolean;
    rustTargetDirectory?: string;
    schedule?: string;
    zipGo?: boolean;
}
declare type GlobPattern = string;
export declare type Config = Record<GlobPattern, FunctionConfig>;
export declare const getConfigForFunction: ({ config, func, }: {
    config?: Config | undefined;
    func: Omit<FunctionSource, 'config'>;
}) => FunctionConfig;
export {};
