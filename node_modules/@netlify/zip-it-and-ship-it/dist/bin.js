#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const process_1 = require("process");
const yargs_1 = __importDefault(require("yargs"));
const helpers_1 = require("yargs/helpers");
const main_js_1 = require("./main.js");
// CLI entry point
const runCli = async function () {
    // @ts-expect-error TODO: `destFolder` and  `srcFolder` are not being passed
    // back from `parseArgs()`.
    const { destFolder, srcFolder, ...options } = parseArgs();
    try {
        global.ZISI_CLI = true;
        // @ts-expect-error TODO: `options` is not getting the right types.
        const zipped = await (0, main_js_1.zipFunctions)(srcFolder, destFolder, options);
        console.log(JSON.stringify(zipped, null, 2));
    }
    catch (error) {
        console.error(error.toString());
        (0, process_1.exit)(1);
    }
};
const parseArgs = function () {
    return (0, yargs_1.default)((0, helpers_1.hideBin)(process_1.argv))
        .command('* <srcFolder> <destFolder>', 'Create ZIP archives from a directory')
        .options(OPTIONS)
        .usage(USAGE)
        .strict()
        .parse();
};
const archiveFormats = ['none', 'zip'];
const defaultArchiveFormat = 'zip';
const OPTIONS = {
    'archive-format': {
        string: true,
        choices: archiveFormats,
        default: defaultArchiveFormat,
        describe: 'Format of the archive created for each function',
    },
    config: {
        default: {},
        describe: 'An object matching glob-like expressions to objects containing configuration properties. Whenever a function name matches one of the expressions, it inherits the configuration properties',
    },
    manifest: {
        string: true,
        describe: 'If a manifest file is to be created, specifies its path',
    },
    'parallel-limit': {
        number: true,
        describe: 'Maximum number of Functions to bundle at the same time',
    },
};
const USAGE = `$0 [OPTIONS...] FUNCTIONS_DIRECTORY OUTPUT_DIRECTORY

Zip all function files inside FUNCTIONS_DIRECTORY so that they can be uploaded
to AWS Lambda.`;
runCli();
//# sourceMappingURL=bin.js.map