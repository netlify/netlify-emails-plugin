"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const fs_js_1 = require("../../../../utils/fs.js");
const non_nullable_js_1 = require("../../../../utils/non_nullable.js");
const base_path_js_1 = require("../../utils/base_path.js");
const bundler_js_1 = require("./bundler.js");
const special_cases_js_1 = require("./special_cases.js");
const src_files_js_1 = require("./src_files.js");
const getFunctionBasePath = ({ basePathFromConfig, mainFile, repositoryRoot, supportingSrcFiles, }) => {
    // If there is a base path defined in the config, we use that. To account for
    // paths outside of `basePathFromConfig` but inside `repositoryRoot`, we use
    // the common path prefix between the two.
    if (basePathFromConfig !== undefined) {
        return (0, base_path_js_1.getBasePath)([basePathFromConfig, repositoryRoot].filter(non_nullable_js_1.nonNullable));
    }
    // If not, the base path is the common path prefix between all the supporting
    // files and the main file.
    const dirnames = [...supportingSrcFiles, mainFile].map((filePath) => (0, path_1.normalize)((0, path_1.dirname)(filePath)));
    return (0, base_path_js_1.getBasePath)(dirnames);
};
// Convenience method for retrieving external and ignored modules from
// different places and merging them together.
const getExternalAndIgnoredModules = async ({ config, srcDir }) => {
    const { externalNodeModules: externalModulesFromConfig = [], ignoredNodeModules: ignoredModulesFromConfig = [] } = config;
    const { externalModules: externalModulesFromSpecialCases, ignoredModules: ignoredModulesFromSpecialCases } = await (0, special_cases_js_1.getExternalAndIgnoredModulesFromSpecialCases)({ srcDir });
    const externalModules = [...new Set([...externalModulesFromConfig, ...externalModulesFromSpecialCases])];
    const ignoredModules = [...ignoredModulesFromConfig, ...ignoredModulesFromSpecialCases];
    return { externalModules, ignoredModules };
};
const bundle = async ({ basePath, config = {}, extension, featureFlags, filename, mainFile, name, pluginsModulesPath, repositoryRoot, runtime, srcDir, srcPath, stat, }) => {
    const { externalModules, ignoredModules } = await getExternalAndIgnoredModules({ config, srcDir });
    const { additionalPaths, bundlePaths, cleanTempFiles, inputs, moduleFormat, nativeNodeModules = {}, nodeModulesWithDynamicImports, warnings, } = await (0, bundler_js_1.bundleJsFile)({
        additionalModulePaths: pluginsModulesPath ? [pluginsModulesPath] : [],
        basePath,
        config,
        externalModules,
        featureFlags,
        ignoredModules,
        name,
        srcDir,
        srcFile: mainFile,
    });
    const bundlerWarnings = warnings.length === 0 ? undefined : warnings;
    const { srcFiles, includedFiles } = await (0, src_files_js_1.getSrcFiles)({
        basePath,
        config: {
            ...config,
            externalNodeModules: [...externalModules, ...Object.keys(nativeNodeModules)],
            includedFiles: [...(config.includedFiles || []), ...additionalPaths],
            includedFilesBasePath: config.includedFilesBasePath || basePath,
        },
        extension,
        featureFlags,
        filename,
        mainFile,
        name,
        pluginsModulesPath,
        runtime,
        srcDir,
        srcPath,
        stat,
    });
    // We want to remove `mainFile` from `srcFiles` because it represents the
    // path of the original, pre-bundling function file. We'll add the actual
    // bundled file further below.
    const supportingSrcFiles = srcFiles.filter((path) => path !== mainFile);
    const normalizedMainFile = (0, fs_js_1.getPathWithExtension)(mainFile, '.js');
    const functionBasePath = getFunctionBasePath({
        basePathFromConfig: basePath,
        mainFile,
        repositoryRoot,
        supportingSrcFiles,
    });
    return {
        aliases: bundlePaths,
        cleanupFunction: cleanTempFiles,
        basePath: functionBasePath,
        bundlerWarnings,
        includedFiles,
        inputs,
        mainFile: normalizedMainFile,
        moduleFormat,
        nativeNodeModules,
        nodeModulesWithDynamicImports,
        srcFiles: [...supportingSrcFiles, ...bundlePaths.keys()],
    };
};
const bundler = { bundle, getSrcFiles: src_files_js_1.getSrcFiles };
exports.default = bundler;
//# sourceMappingURL=index.js.map