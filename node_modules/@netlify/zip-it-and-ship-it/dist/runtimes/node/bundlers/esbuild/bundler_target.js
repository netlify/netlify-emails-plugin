"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getModuleFormat = exports.getBundlerTarget = void 0;
const node_version_1 = require("../../utils/node_version");
const package_json_1 = require("../../utils/package_json");
const versionMap = {
    '8.x': 'node8',
    '10.x': 'node10',
    '12.x': 'node12',
    '14.x': 'node14',
    '16.x': 'node16',
};
const getBundlerTarget = (suppliedVersion) => {
    const version = normalizeVersion(suppliedVersion);
    if (version && version in versionMap) {
        return versionMap[version];
    }
    return versionMap[`${node_version_1.DEFAULT_NODE_VERSION}.x`];
};
exports.getBundlerTarget = getBundlerTarget;
const getModuleFormat = async (srcDir, featureFlags, configVersion) => {
    const packageJsonFile = await (0, package_json_1.getClosestPackageJson)(srcDir);
    const nodeSupport = (0, node_version_1.getNodeSupportMatrix)(configVersion);
    if (featureFlags.zisi_pure_esm && (packageJsonFile === null || packageJsonFile === void 0 ? void 0 : packageJsonFile.contents.type) === 'module' && nodeSupport.esm) {
        return {
            includedFiles: [packageJsonFile.path],
            moduleFormat: 'esm',
        };
    }
    return {
        includedFiles: [],
        moduleFormat: 'cjs',
    };
};
exports.getModuleFormat = getModuleFormat;
const normalizeVersion = (version) => {
    const match = version && version.match(/^nodejs(.*)$/);
    return match ? match[1] : version;
};
//# sourceMappingURL=bundler_target.js.map