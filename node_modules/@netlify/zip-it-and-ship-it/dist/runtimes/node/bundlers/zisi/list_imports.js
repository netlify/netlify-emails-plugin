"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.listImports = void 0;
const esbuild = __importStar(require("@netlify/esbuild"));
const is_builtin_module_1 = __importDefault(require("is-builtin-module"));
const tmp_promise_1 = require("tmp-promise");
const error_js_1 = require("../../../../utils/error.js");
const fs_js_1 = require("../../../../utils/fs.js");
// Maximum number of log messages that an esbuild instance will produce. This
// limit is important to avoid out-of-memory errors due to too much data being
// sent in the Go<>Node IPC channel.
const ESBUILD_LOG_LIMIT = 10;
const getListImportsPlugin = ({ imports, path }) => ({
    name: 'list-imports',
    setup(build) {
        build.onResolve({ filter: /.*/ }, (args) => {
            const isEntryPoint = args.path === path;
            const isImport = !isEntryPoint && !(0, is_builtin_module_1.default)(args.path);
            if (isImport) {
                imports.add(args.path);
            }
            return {
                namespace: 'list-imports',
                external: isImport,
            };
        });
    },
});
const listImports = async ({ functionName, path, }) => {
    // We're not interested in the output that esbuild generates, we're just
    // using it for its parsing capabilities in order to find import/require
    // statements. However, if we don't give esbuild a path in `outfile`, it
    // will pipe the output to stdout, which we also don't want. So we create
    // a temporary file to serve as the esbuild output and then get rid of it
    // when we're done.
    const targetPath = await (0, tmp_promise_1.tmpName)();
    const imports = new Set();
    try {
        await esbuild.build({
            bundle: true,
            entryPoints: [path],
            logLevel: 'error',
            logLimit: ESBUILD_LOG_LIMIT,
            outfile: targetPath,
            platform: 'node',
            plugins: [getListImportsPlugin({ imports, path })],
            target: 'esnext',
        });
    }
    catch (error) {
        throw error_js_1.FunctionBundlingUserError.addCustomErrorInfo(error, { functionName, runtime: 'js', bundler: 'zisi' });
    }
    finally {
        await (0, fs_js_1.safeUnlink)(targetPath);
    }
    return [...imports];
};
exports.listImports = listImports;
//# sourceMappingURL=list_imports.js.map