"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDependencyPathsForDependency = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const non_nullable_js_1 = require("../../../../utils/non_nullable.js");
const module_js_1 = require("../../utils/module.js");
const nested_js_1 = require("./nested.js");
const published_js_1 = require("./published.js");
const resolve_js_1 = require("./resolve.js");
const side_files_js_1 = require("./side_files.js");
const EXCLUDED_MODULES = new Set(['aws-sdk']);
// When a file requires a module, we find its path inside `node_modules` and
// use all its published files. We also recurse on the module's dependencies.
const getDependencyPathsForDependency = async function ({ dependency, basedir, state, packageJson, pluginsModulesPath, }) {
    const moduleName = (0, module_js_1.getModuleName)(dependency);
    // Happens when doing require("@scope") (not "@scope/name") or other oddities
    // Ignore those.
    if (moduleName === null) {
        return [];
    }
    try {
        return await getDependenciesForModuleName({ moduleName, basedir, state, pluginsModulesPath });
    }
    catch (error) {
        return (0, nested_js_1.handleModuleNotFound)({ error, moduleName, packageJson });
    }
};
exports.getDependencyPathsForDependency = getDependencyPathsForDependency;
const getDependenciesForModuleName = async function ({ moduleName, basedir, state, pluginsModulesPath, }) {
    if (isExcludedModule(moduleName)) {
        return [];
    }
    // Find the Node.js module directory path
    const packagePath = await (0, resolve_js_1.resolvePackage)(moduleName, [basedir, pluginsModulesPath].filter(non_nullable_js_1.nonNullable));
    if (packagePath === undefined) {
        return [];
    }
    const modulePath = (0, path_1.dirname)(packagePath);
    if (state.modulePaths.has(modulePath)) {
        return [];
    }
    state.moduleNames.add(moduleName);
    state.modulePaths.add(modulePath);
    // The path depends on the user's build, i.e. must be dynamic
    const packageJson = JSON.parse(await fs_1.promises.readFile(packagePath, 'utf8'));
    const [publishedFiles, sideFiles, depsPaths] = await Promise.all([
        (0, published_js_1.getPublishedFiles)(modulePath),
        (0, side_files_js_1.getSideFiles)(modulePath, moduleName),
        getNestedModules({ modulePath, state, packageJson, pluginsModulesPath }),
    ]);
    return [...publishedFiles, ...sideFiles, ...depsPaths];
};
const isExcludedModule = function (moduleName) {
    return EXCLUDED_MODULES.has(moduleName) || moduleName.startsWith('@types/');
};
const getNestedModules = async function ({ modulePath, state, packageJson, pluginsModulesPath, }) {
    const dependencies = (0, nested_js_1.getNestedDependencies)(packageJson);
    const depsPaths = await Promise.all(dependencies.map((dependency) => (0, exports.getDependencyPathsForDependency)({ dependency, basedir: modulePath, state, packageJson, pluginsModulesPath })));
    return depsPaths.flat();
};
//# sourceMappingURL=traverse.js.map