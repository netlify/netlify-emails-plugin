"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const nft_1 = require("@vercel/nft");
const resolve_dependency_js_1 = __importDefault(require("@vercel/nft/out/resolve-dependency.js"));
const fs_js_1 = require("../../../../utils/fs.js");
const matching_js_1 = require("../../../../utils/matching.js");
const base_path_js_1 = require("../../utils/base_path.js");
const included_files_js_1 = require("../../utils/included_files.js");
const es_modules_js_1 = require("./es_modules.js");
// Paths that will be excluded from the tracing process.
const ignore = ['node_modules/aws-sdk/**'];
const appearsToBeModuleName = (name) => !name.startsWith('.');
const bundle = async ({ basePath, config, featureFlags, mainFile, name, pluginsModulesPath, repositoryRoot = basePath, }) => {
    const { includedFiles = [], includedFilesBasePath } = config;
    const { excludePatterns, paths: includedFilePaths } = await (0, included_files_js_1.getPathsOfIncludedFiles)(includedFiles, includedFilesBasePath || basePath);
    const { moduleFormat, paths: dependencyPaths, rewrites, } = await traceFilesAndTranspile({
        basePath: repositoryRoot,
        config,
        featureFlags,
        mainFile,
        pluginsModulesPath,
        name,
    });
    const includedPaths = (0, included_files_js_1.filterExcludedPaths)(includedFilePaths, excludePatterns);
    const filteredIncludedPaths = [...(0, included_files_js_1.filterExcludedPaths)(dependencyPaths, excludePatterns), ...includedPaths];
    const dirnames = filteredIncludedPaths.map((filePath) => (0, path_1.normalize)((0, path_1.dirname)(filePath))).sort();
    // Sorting the array to make the checksum deterministic.
    const srcFiles = [...filteredIncludedPaths].sort();
    return {
        basePath: (0, base_path_js_1.getBasePath)(dirnames),
        includedFiles: includedPaths,
        inputs: dependencyPaths,
        mainFile,
        moduleFormat,
        rewrites,
        srcFiles,
    };
};
const ignoreFunction = (path) => {
    const shouldIgnore = ignore.some((expression) => (0, matching_js_1.minimatch)(path, expression));
    return shouldIgnore;
};
const traceFilesAndTranspile = async function ({ basePath, config, featureFlags, mainFile, pluginsModulesPath, name, }) {
    const fsCache = {};
    const { fileList: dependencyPaths, esmFileList, reasons, } = await (0, nft_1.nodeFileTrace)([mainFile], {
        base: basePath,
        ignore: ignoreFunction,
        readFile: async (path) => {
            try {
                const source = (await (0, fs_js_1.cachedReadFile)(fsCache, path, 'utf8'));
                return source;
            }
            catch (error) {
                if (error.code === 'ENOENT' || error.code === 'EISDIR') {
                    return null;
                }
                throw error;
            }
        },
        resolve: async (specifier, parent, ...args) => {
            try {
                return await (0, resolve_dependency_js_1.default)(specifier, parent, ...args);
            }
            catch (error) {
                // If we get a `MODULE_NOT_FOUND` error for what appears to be a module
                // name, we try to resolve it a second time using `pluginsModulesPath`
                // as the base directory.
                if (error.code === 'MODULE_NOT_FOUND' && pluginsModulesPath && appearsToBeModuleName(specifier)) {
                    const newParent = (0, path_1.join)(pluginsModulesPath, (0, path_1.basename)(parent));
                    return await (0, resolve_dependency_js_1.default)(specifier, newParent, ...args);
                }
                throw error;
            }
        },
    });
    const normalizedDependencyPaths = [...dependencyPaths].map((path) => basePath ? (0, path_1.resolve)(basePath, path) : (0, path_1.resolve)(path));
    const { moduleFormat, rewrites } = await (0, es_modules_js_1.processESM)({
        basePath,
        config,
        esmPaths: esmFileList,
        featureFlags,
        fsCache,
        mainFile,
        reasons,
        name,
    });
    return {
        moduleFormat,
        paths: normalizedDependencyPaths,
        rewrites,
    };
};
const getSrcFiles = async function ({ basePath, config, mainFile }) {
    const { includedFiles = [], includedFilesBasePath } = config;
    const { excludePatterns, paths: includedFilePaths } = await (0, included_files_js_1.getPathsOfIncludedFiles)(includedFiles, includedFilesBasePath);
    const { fileList: dependencyPaths } = await (0, nft_1.nodeFileTrace)([mainFile], { base: basePath, ignore: ignoreFunction });
    const normalizedDependencyPaths = [...dependencyPaths].map((path) => basePath ? (0, path_1.resolve)(basePath, path) : (0, path_1.resolve)(path));
    const srcFiles = (0, included_files_js_1.filterExcludedPaths)(normalizedDependencyPaths, excludePatterns);
    const includedPaths = (0, included_files_js_1.filterExcludedPaths)(includedFilePaths, excludePatterns);
    return {
        srcFiles: [...srcFiles, ...includedPaths],
        includedFiles: includedPaths,
    };
};
const bundler = { bundle, getSrcFiles };
exports.default = bundler;
//# sourceMappingURL=index.js.map