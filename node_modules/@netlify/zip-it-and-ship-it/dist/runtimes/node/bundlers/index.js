"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultBundler = exports.getBundler = void 0;
const detect_es_module_js_1 = require("../utils/detect_es_module.js");
const index_js_1 = __importDefault(require("./esbuild/index.js"));
const index_js_2 = __importDefault(require("./nft/index.js"));
const index_js_3 = __importDefault(require("./zisi/index.js"));
const getBundler = (name) => {
    switch (name) {
        case 'esbuild':
        case 'esbuild_zisi':
            return index_js_1.default;
        case 'nft':
            return index_js_2.default;
        case 'zisi':
            return index_js_3.default;
        default:
            throw new Error(`Unsupported Node bundler: ${name}`);
    }
};
exports.getBundler = getBundler;
// We use ZISI as the default bundler, except for certain extensions, for which
// esbuild is the only option.
const getDefaultBundler = async ({ extension, mainFile, featureFlags, }) => {
    if (['.mjs', '.ts'].includes(extension)) {
        return 'esbuild';
    }
    if (featureFlags.traceWithNft) {
        return 'nft';
    }
    const functionIsESM = await (0, detect_es_module_js_1.detectEsModule)({ mainFile });
    return functionIsESM ? 'nft' : 'zisi';
};
exports.getDefaultBundler = getDefaultBundler;
//# sourceMappingURL=index.js.map