"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPathsOfIncludedFiles = exports.filterExcludedPaths = void 0;
const path_1 = require("path");
const matching_1 = require("../../../utils/matching");
// Returns the subset of `paths` that don't match any of the glob expressions
// from `exclude`.
const filterExcludedPaths = (paths, excludePattern = []) => {
    if (excludePattern.length === 0) {
        return paths;
    }
    const excludedPaths = paths.filter((path) => !excludePattern.some((pattern) => (0, matching_1.minimatch)(path, pattern)));
    return excludedPaths;
};
exports.filterExcludedPaths = filterExcludedPaths;
const getPathsOfIncludedFiles = async (includedFiles, basePath) => {
    if (basePath === undefined) {
        return { excludePatterns: [], paths: [] };
    }
    // Some of the globs in `includedFiles` might be exclusion patterns, which
    // means paths that should NOT be included in the bundle. We need to treat
    // these differently, so we iterate on the array and put those paths in a
    // `exclude` array and the rest of the paths in an `include` array.
    const { include, excludePatterns } = includedFiles.reduce((acc, path) => {
        if (path.startsWith('!')) {
            // convert to unix paths, as minimatch does not support windows paths in patterns
            const excludePattern = (0, path_1.resolve)(basePath, path.slice(1));
            return {
                include: acc.include,
                excludePatterns: [...acc.excludePatterns, excludePattern],
            };
        }
        return {
            include: [...acc.include, path],
            excludePatterns: acc.excludePatterns,
        };
    }, { include: [], excludePatterns: [] });
    const pathGroups = await Promise.all(include.map((expression) => (0, matching_1.glob)(expression, { absolute: true, cwd: basePath, ignore: excludePatterns, nodir: true })));
    // `pathGroups` is an array containing the paths for each expression in the
    // `include` array. We flatten it into a single dimension.
    const paths = pathGroups.flat();
    const normalizedPaths = paths.map(path_1.normalize);
    return { excludePatterns, paths: [...new Set(normalizedPaths)] };
};
exports.getPathsOfIncludedFiles = getPathsOfIncludedFiles;
//# sourceMappingURL=included_files.js.map