"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sanitisePackageJson = exports.getPackageJsonIfAvailable = exports.getPackageJson = exports.getClosestPackageJson = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const find_up_1 = __importDefault(require("find-up"));
const getClosestPackageJson = async (resolveDir) => {
    const packageJsonPath = await (0, find_up_1.default)(async (directory) => {
        // We stop traversing if we're about to leave the boundaries of any
        // node_modules directory.
        if ((0, path_1.basename)(directory) === 'node_modules') {
            return find_up_1.default.stop;
        }
        const path = (0, path_1.join)(directory, 'package.json');
        const hasPackageJson = await find_up_1.default.exists(path);
        return hasPackageJson ? path : undefined;
    }, { cwd: resolveDir });
    if (packageJsonPath === undefined) {
        return null;
    }
    const packageJson = await readPackageJson(packageJsonPath);
    return {
        contents: packageJson,
        path: packageJsonPath,
    };
};
exports.getClosestPackageJson = getClosestPackageJson;
// Retrieve the `package.json` of a specific project or module
const getPackageJson = async function (srcDir) {
    var _a;
    const result = await (0, exports.getClosestPackageJson)(srcDir);
    return (_a = result === null || result === void 0 ? void 0 : result.contents) !== null && _a !== void 0 ? _a : {};
};
exports.getPackageJson = getPackageJson;
const getPackageJsonIfAvailable = async (srcDir) => {
    try {
        const packageJson = await (0, exports.getPackageJson)(srcDir);
        return packageJson;
    }
    catch {
        return {};
    }
};
exports.getPackageJsonIfAvailable = getPackageJsonIfAvailable;
const readPackageJson = async (path) => {
    try {
        // The path depends on the user's build, i.e. must be dynamic
        const packageJson = JSON.parse(await fs_1.promises.readFile(path, 'utf8'));
        return (0, exports.sanitisePackageJson)(packageJson);
    }
    catch (error) {
        throw new Error(`${path} is invalid JSON: ${error.message}`);
    }
};
const sanitiseFiles = (files) => {
    if (!Array.isArray(files)) {
        return undefined;
    }
    return files.filter((file) => typeof file === 'string');
};
const sanitisePackageJson = (packageJson) => ({
    ...packageJson,
    files: sanitiseFiles(packageJson.files),
});
exports.sanitisePackageJson = sanitisePackageJson;
//# sourceMappingURL=package_json.js.map