"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findISCDeclarationsInPath = exports.IN_SOURCE_CONFIG_MODULE = void 0;
const error_js_1 = require("../../../utils/error.js");
const non_nullable_js_1 = require("../../../utils/non_nullable.js");
const bindings_js_1 = require("../parser/bindings.js");
const exports_js_1 = require("../parser/exports.js");
const imports_js_1 = require("../parser/imports.js");
const index_js_1 = require("../parser/index.js");
const schedule_js_1 = require("./properties/schedule.js");
exports.IN_SOURCE_CONFIG_MODULE = '@netlify/functions';
const validateScheduleFunction = (functionFound, scheduleFound, functionName) => {
    if (!functionFound) {
        throw new error_js_1.FunctionBundlingUserError("The `schedule` helper was imported but we couldn't find any usages. If you meant to schedule a function, please check that `schedule` is invoked and `handler` correctly exported.", { functionName, runtime: 'js' });
    }
    if (!scheduleFound) {
        throw new error_js_1.FunctionBundlingUserError('Unable to find cron expression for scheduled function. The cron expression (first argument) for the `schedule` helper needs to be accessible inside the file and cannot be imported.', { functionName, runtime: 'js' });
    }
};
// Parses a JS/TS file and looks for in-source config declarations. It returns
// an array of all declarations found, with `property` indicating the name of
// the property and `data` its value.
const findISCDeclarationsInPath = async (sourcePath, functionName) => {
    const ast = await (0, index_js_1.safelyParseFile)(sourcePath);
    if (ast === null) {
        return {};
    }
    const imports = ast.body.flatMap((node) => (0, imports_js_1.getImports)(node, exports.IN_SOURCE_CONFIG_MODULE));
    const scheduledFunctionExpected = imports.some(({ imported }) => imported === 'schedule');
    let scheduledFunctionFound = false;
    let scheduleFound = false;
    const getAllBindings = (0, bindings_js_1.createBindingsMethod)(ast.body);
    const mainExports = (0, exports_js_1.getMainExport)(ast.body, getAllBindings);
    const iscExports = mainExports
        .map(({ args, local: exportName }) => {
        const matchingImport = imports.find(({ local: importName }) => importName === exportName);
        if (matchingImport === undefined) {
            return null;
        }
        switch (matchingImport.imported) {
            case 'schedule': {
                const parsed = (0, schedule_js_1.parse)({ args }, getAllBindings);
                scheduledFunctionFound = true;
                if (parsed.schedule) {
                    scheduleFound = true;
                }
                return parsed;
            }
            default:
            // no-op
        }
        return null;
    })
        .filter(non_nullable_js_1.nonNullable);
    if (scheduledFunctionExpected) {
        validateScheduleFunction(scheduledFunctionFound, scheduleFound, functionName);
    }
    const mergedExports = iscExports.reduce((acc, obj) => ({ ...acc, ...obj }), {});
    return mergedExports;
};
exports.findISCDeclarationsInPath = findISCDeclarationsInPath;
//# sourceMappingURL=index.js.map