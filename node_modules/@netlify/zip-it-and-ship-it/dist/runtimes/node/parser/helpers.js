"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isRequire = exports.isModuleExports = exports.isImport = void 0;
const isDotExpression = (node, expression) => {
    if (node.type !== 'MemberExpression') {
        return false;
    }
    const object = expression.slice(0, -1);
    const [property] = expression.slice(-1);
    if (node.property.type !== 'Identifier' || node.property.name !== property) {
        return false;
    }
    if (object.length > 1) {
        return isDotExpression(node.object, object);
    }
    return node.object.type === 'Identifier' && object[0] === node.object.name && property === node.property.name;
};
const isImport = (node, importPath) => node.type === 'ImportDeclaration' && node.source.value === importPath;
exports.isImport = isImport;
const isModuleExports = (node, dotExpression = ['module', 'exports']) => node.type === 'ExpressionStatement' &&
    node.expression.type === 'AssignmentExpression' &&
    node.expression.left.type === 'MemberExpression' &&
    isDotExpression(node.expression.left, dotExpression);
exports.isModuleExports = isModuleExports;
const isRequire = (node, requirePath) => {
    var _a;
    if (!node || node.type !== 'CallExpression') {
        return false;
    }
    const { arguments: args, callee } = node;
    const isRequiredModule = ((_a = args[0]) === null || _a === void 0 ? void 0 : _a.type) === 'StringLiteral' && isRequirePath(args[0], requirePath);
    return isRequireCall(callee) && isRequiredModule;
};
exports.isRequire = isRequire;
const isRequireCall = (node) => node.type === 'Identifier' && node.name === 'require';
const isRequirePath = (node, path) => node.type === 'StringLiteral' && node.value === path;
//# sourceMappingURL=helpers.js.map