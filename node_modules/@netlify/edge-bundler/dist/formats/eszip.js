import { join, resolve } from 'path';
import { fileURLToPath } from 'url';
import { wrapBundleError } from '../bundle_error.js';
import { getFileHash } from '../utils/sha256.js';
const bundleESZIP = async ({ basePath, buildID, debug, deno, distDirectory, functions, importMap, }) => {
    const extension = '.eszip';
    const destPath = join(distDirectory, `${buildID}${extension}`);
    const bundler = getESZIPBundler();
    const payload = {
        basePath,
        destPath,
        functions,
        imports: importMap.imports,
    };
    const flags = ['--allow-all'];
    if (!debug) {
        flags.push('--quiet');
    }
    try {
        await deno.run(['run', ...flags, bundler, JSON.stringify(payload)], { pipeOutput: true });
    }
    catch (error) {
        throw wrapBundleError(error, { format: 'eszip' });
    }
    const hash = await getFileHash(destPath);
    return { extension, format: 'eszip2', hash };
};
const getESZIPBundler = () => {
    const url = new URL(import.meta.url);
    const pathname = fileURLToPath(url);
    const bundlerPath = resolve(pathname, '../../../deno/bundle.ts');
    return bundlerPath;
};
export { bundleESZIP as bundle };
